name: "Regressions Slack Notifier"
on:
  issues:
    types:
      - labeled
  pull_request:
    types:
      - labeled
jobs:
  slack-notification:
    name: Slack Notifier
    if: github.event.label.name == 'regression'
    runs-on: self-hosted
    steps:
      - name: Send Slack Notification
        uses: slackapi/slack-github-action@e28cf165c92ffef168d23c5c9000cffc8a25e117 # v1.24.0
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          EVENT_URL: ${{ github.event.issue.html_url || github.event.pull_request.html_url }}
          EVENT_TITLE: ${{ github.event.issue.title || github.event.pull_request.title }}
        with:
          channel-id: ${{ secrets.SLACK_CHANNEL }}
          payload: |
            {
            	"blocks": [
            		{
            			"type": "section",
            			"text": {
            				"type": "mrkdwn",
            				"text": ":warning: The following has been labeled as a regression:"
            			}
            		},
            		{
            			"type": "section",
            			"text": {
            				"type": "mrkdwn",
            				"text": "<${{ env.EVENT_URL }}|${{ env.EVENT_TITLE }}>"
            			}
            		}
            	]
            }

  AddToWorkingBoard:
    name: Add regression to Working Board
    if: github.event.label.name == 'regression'
    env:
      DESTINATION_COLUMN_ID: 'MDEzOlByb2plY3RDb2x1bW4xMTUxMzUyOQ=='
      GH_TOKEN: ${{ secrets.ORGSCOPED_GITHUB_TOKEN }}
    runs-on: self-hosted
    steps:
      - name: 'Add Regression Issues to To Do column'
        if: github.event_name == 'issues'
        run: |
          PROJCOLUMNS=$(gh api graphql -f query='
              query {
                repository(name: "${{ github.event.repository.name }}", owner: "${{ github.repository_owner }}") {
                  issue(number: ${{ github.event.issue.number }}) {
                  projectCards {
                    nodes {
                      column {
                        name
                        id
                      }
                    }
                  }
                }
              }
            }')
          INPROJECT=$(echo $PROJCOLUMNS | jq '.data.repository.issue.projectCards.nodes[].column | select(.id=="${{ env.DESTINATION_COLUMN_ID }}")')
          if [ -z "$INPROJECT" ];
          then
            gh api graphql -f query='mutation {
              addProjectCard(input: {projectColumnId: "${{ env.DESTINATION_COLUMN_ID }}", contentId: "${{ github.event.issue.node_id }}"}) {
                clientMutationId
              }
            }'
          fi

      - name: 'Add Regression Pull Requests to To Do column'
        if: github.event_name == 'pull_request'
        run: |
          PROJCOLUMNS=$(gh api graphql -f query='
              query {
                repository(name: "${{ github.event.repository.name }}", owner: "${{ github.repository_owner }}") {
                  pullRequest(number: ${{ github.event.pull_request.number }}) {
                  projectCards {
                    nodes {
                      column {
                        name
                        id
                      }
                    }
                  }
                }
              }
            }')
          INPROJECT=$(echo $PROJCOLUMNS | jq '.data.repository.pullRequest.projectCards.nodes[].column | select(.id=="${{ env.DESTINATION_COLUMN_ID }}")')
          if [ -z "$INPROJECT" ];
          then
            gh api graphql -f query='mutation {
              addProjectCard(input: {projectColumnId: "${{ env.DESTINATION_COLUMN_ID }}", contentId: "${{ github.event.pull_request.node_id }}"}) {
                clientMutationId
              }
            }'
          fi
